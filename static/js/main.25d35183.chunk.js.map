{"version":3,"sources":["Components/ThemeContext.js","Components/Message/Message.js","Components/Grid/GridComponents/Cell.js","Components/Grid/GridComponents/Winner.js","Components/Grid/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","Message","player","turn","useContext","Cell","boardSet","board","index","winner","useState","filled","filledSet","turnSet","fill","a","decidePlayer","prev","useEffect","updateBoard","boardUpdated","console","log","className","onClick","Winner","Grid","history","historySet","winnerSet","cellsFill","mapBoard","xOrY","boardMapped","forEach","value","i","push","checkIfWinner","JSON","stringify","includes","some","x","join","map","_","App","playerSet","turnFunction","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25d35183.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ThemeContext = React.createContext([2, () => {}]);\n\nexport default ThemeContext;\n","import React, { useContext, useEffect } from \"react\";\nimport ThemeContext from \"../ThemeContext\";\n\nfunction Message({ player }) {\n  const turn = useContext(ThemeContext)[0];\n\n  return (\n    <section>\n      Player {player} turn ({turn})\n    </section>\n  );\n}\n\nexport default Message;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport ThemeContext from \"../../ThemeContext\";\nimport AppTheme from \"../../../Colors\";\n\nfunction Cell({ player, boardSet, board, index, winner }) {\n  const [filled, filledSet] = useState(null);\n  const theme = useContext(ThemeContext)[0];\n  const currentTheme = AppTheme[theme];\n  const [turn, turnSet] = useContext(ThemeContext);\n  const fill = async () => {\n    if (filled != null) return;\n    decidePlayer();\n    turnSet((prev) => prev + 1);\n  };\n  useEffect(() => {\n    updateBoard();\n  }, [filled]);\n  useEffect(() => {}, [filled]);\n  const updateBoard = () => {\n    let boardUpdated = [...board];\n    boardUpdated[index] = filled;\n    boardSet(boardUpdated);\n  };\n  const decidePlayer = () => {\n    switch (player) {\n      case \"X\":\n        filledSet(\"X\");\n        break;\n      case \"O\":\n        filledSet(\"O\");\n        break;\n      default:\n        console.log(`error player`);\n    }\n  };\n  return (\n    <div className={`cell${winner || filled ? \"--filled\" : \"\"}`} onClick={fill}>\n      {filled}\n    </div>\n  );\n}\n\nexport default Cell;\n","import React from \"react\";\n\nconst Winner = ({ winner }) => {\n  return <div>Winner is {winner}</div>;\n};\nexport default Winner;\n","import React, { useState, useEffect } from \"react\";\nimport Cell from \"./GridComponents/Cell\";\nimport Winner from \"./GridComponents/Winner\";\n\nimport \"./Grid.scss\";\nfunction Grid({ player }) {\n  const [board, boardSet] = useState([\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n  ]);\n  const [history, historySet] = useState([]);\n  const [winner, winnerSet] = useState(null);\n  const [cellsFill, cellsFillSet] = useState([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n  ]);\n  useEffect(() => {\n    mapBoard(\"X\");\n    mapBoard(\"O\");\n  }, [board]);\n  const mapBoard = (xOrY) => {\n    let boardMapped = [];\n    board.forEach((value, i) => {\n      if (value === xOrY) boardMapped.push(i);\n    });\n    checkIfWinner(boardMapped);\n  };\n  useEffect(() => {\n    if (!JSON.stringify(history).includes(JSON.stringify(board)))\n      historySet((prev) => [...prev, board]);\n  }, [board]);\n  const checkIfWinner = (boardMapped) => {\n    const is = cellsFill.some((x) => {\n      return x.join() == boardMapped.join();\n    });\n    cellsFill.forEach((value, i) => {\n      if (value.join() === boardMapped.join()) {\n        winnerSet(board[boardMapped[0]]);\n      }\n    });\n  };\n  return (\n    <section className=\"grid\">\n      <div className=\"grid__inner\">\n        {board &&\n          board.map((_, index) => {\n            return (\n              <Cell\n                player={player}\n                index={index}\n                boardSet={boardSet}\n                board={board}\n                winner={winner}\n              ></Cell>\n            );\n          })}\n      </div>\n      <Winner winner={winner} />\n    </section>\n  );\n}\n\nexport default Grid;\n","import \"./App.css\";\nimport Message from \"./Components/Message/Message\";\nimport Grid from \"./Components/Grid/Grid\";\nimport { useState, useContext, useEffect } from \"react\";\nimport ThemeContext from \"./Components/ThemeContext\";\nfunction App() {\n  const [player, playerSet] = useState(\"X\");\n  const turnFunction = useState(1);\n  const turn = turnFunction[0];\n  useEffect(() => {\n    if (turn % 2 === 0) playerSet(\"O\");\n    else playerSet(\"X\");\n  }, [turnFunction]);\n\n  return (\n    <ThemeContext.Provider value={turnFunction}>\n      <div className=\"container\">\n        <Message player={player} />\n        <Grid player={player} />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}