{"version":3,"sources":["Components/ThemeContext.js","Components/Message/Message.js","Components/Grid/GridComponents/Cell.js","Components/Grid/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","Message","player","turn","useContext","Cell","boardSet","board","index","useState","filled","filledSet","turnSet","fill","a","decidePlayer","prev","useEffect","updateBoard","boardUpdated","console","log","className","onClick","Grid","winnerSet","cellsFill","mapBoard","xOrY","boardMapped","forEach","value","i","push","checkIfWinner","some","x","join","map","_","App","playerSet","turnFunction","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2f2c2aa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ThemeContext = React.createContext([2, () => {}]);\n\nexport default ThemeContext;\n","import React, { useContext, useEffect } from \"react\";\nimport ThemeContext from \"../ThemeContext\";\n\nfunction Message({ player }) {\n  const turn = useContext(ThemeContext)[0];\n\n  return (\n    <section>\n      Player {player} turn ({turn})\n    </section>\n  );\n}\n\nexport default Message;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport ThemeContext from \"../../ThemeContext\";\nimport AppTheme from \"../../../Colors\";\n\nfunction Cell({ player, boardSet, board, index }) {\n  const [filled, filledSet] = useState(null);\n  const theme = useContext(ThemeContext)[0];\n  const currentTheme = AppTheme[theme];\n  const [turn, turnSet] = useContext(ThemeContext);\n  const fill = async () => {\n    if (filled != null) return;\n    decidePlayer();\n    turnSet((prev) => prev + 1);\n  };\n  useEffect(() => {\n    updateBoard();\n  }, [filled]);\n  const updateBoard = () => {\n    let boardUpdated = [...board];\n    boardUpdated[index] = filled;\n    boardSet(boardUpdated);\n  };\n  const decidePlayer = () => {\n    switch (player) {\n      case \"X\":\n        filledSet(\"X\");\n        break;\n      case \"O\":\n        filledSet(\"O\");\n        break;\n      default:\n        console.log(`error player`);\n    }\n  };\n  return (\n    <div className={`cell ${filled != null ? \"--filled\" : \"\"}`} onClick={fill}>\n      {filled}\n    </div>\n  );\n}\n\nexport default Cell;\n","import React, { useState, useEffect } from \"react\";\nimport Cell from \"./GridComponents/Cell\";\nimport \"./Grid.scss\";\nfunction Grid({ player }) {\n  const [board, boardSet] = useState([\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n  ]);\n  const [winner, winnerSet] = useState(null);\n  const [cellsFill, cellsFillSet] = useState([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n  ]);\n  useEffect(() => {\n    mapBoard(\"X\");\n    mapBoard(\"Y\");\n  }, [board]);\n  const mapBoard = (xOrY) => {\n    let boardMapped = [];\n    board.forEach((value, i) => {\n      if (value === xOrY) boardMapped.push(i);\n    });\n    checkIfWinner(boardMapped);\n  };\n  const checkIfWinner = (boardMapped) => {\n    const is = cellsFill.some((x) => {\n      return x.join() == boardMapped.join();\n    });\n    cellsFill.forEach((value, i) => {\n      if (value.join() === boardMapped.join()) {\n        winnerSet(board[boardMapped[0]]);\n      }\n    });\n  };\n  return (\n    <section className=\"grid\">\n      {board &&\n        board.map((_, index) => {\n          return (\n            <Cell\n              player={player}\n              index={index}\n              boardSet={boardSet}\n              board={board}\n            ></Cell>\n          );\n        })}\n    </section>\n  );\n}\n\nexport default Grid;\n","import \"./App.css\";\nimport Message from \"./Components/Message/Message\";\nimport Grid from \"./Components/Grid/Grid\";\nimport { useState, useContext, useEffect } from \"react\";\nimport ThemeContext from \"./Components/ThemeContext\";\nfunction App() {\n  const [player, playerSet] = useState(\"X\");\n  const turnFunction = useState(1);\n  const turn = turnFunction[0];\n  useEffect(() => {\n    if (turn % 2 === 0) playerSet(\"O\");\n    else playerSet(\"X\");\n  }, [turnFunction]);\n\n  return (\n    <ThemeContext.Provider value={turnFunction}>\n      <div className=\"container\">\n        <Message player={player} />\n        <Grid player={player} />\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}